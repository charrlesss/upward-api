{"version":3,"file":"static/js/2615.b7391327.chunk.js","mappings":"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","sources":["components/DataGridTable.tsx","components/DropdownButton.tsx","feautures/Admin/Reference/SubAccount.tsx","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/material/colors/pink.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Box, LinearProgress } from \"@mui/material\";\r\nimport {\r\n  DataGrid,\r\n  GridColDef,\r\n  GridRowSelectionModel,\r\n  GridRowIdGetter,\r\n} from \"@mui/x-data-grid\";\r\nimport useUrlParams from \"../hooks/useUrlParams\";\r\n\r\ninterface DataGridTableParams {\r\n  onSelectionChange: (rowSelected: GridRowSelectionModel, data: any) => void;\r\n  columns: GridColDef[];\r\n  initialPage?: number;\r\n  rowHeight?: number;\r\n  queryKey: Array<string>;\r\n  dataKey?: string;\r\n  getRowId: GridRowIdGetter<any> | undefined;\r\n  rows: GridRowSelectionModel;\r\n  setRows: React.Dispatch<React.SetStateAction<GridRowSelectionModel>>;\r\n  isLoading: boolean;\r\n  mutipleSelect: boolean;\r\n  height?: string;\r\n}\r\n\r\nexport default function DataGridTable({\r\n  onSelectionChange,\r\n  initialPage = 10,\r\n  columns,\r\n  rowHeight = 35,\r\n  getRowId,\r\n  rows,\r\n  isLoading,\r\n  mutipleSelect,\r\n  height = \"500px\",\r\n}: DataGridTableParams) {\r\n  const { searchParams, setSearchParams } = useUrlParams();\r\n  const [rowSelectionModel, setRowSelectionModel] =\r\n    useState<GridRowSelectionModel>([]);\r\n  const [doubleClick, setDoubleClick] = useState(false);\r\n  const [paginationModel, setPaginationModel] = React.useState({\r\n    pageSize: parseInt(searchParams.get(\"pageSize\") as string) || 100,\r\n    page: parseInt(searchParams.get(\"page\") as string) || 1,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setRowSelectionModel(\r\n      (searchParams.get(\"selected\") as string) === \"\"\r\n        ? []\r\n        : [searchParams.get(\"selected\") as string]\r\n    );\r\n  }, [searchParams]);\r\n\r\n  useEffect(() => {\r\n    onSelectionChange(rowSelectionModel, rows);\r\n  }, [doubleClick]);\r\n\r\n  if (isLoading) {\r\n    const updateColumns: any = columns.map((column) => {\r\n      if (column.field === \"id\") {\r\n        column = { ...column, colSpan: 4, align: \"center\" };\r\n      }\r\n      return column;\r\n    });\r\n    return (\r\n      <Box\r\n        sx={{\r\n          height: 500,\r\n          width: \"100%\",\r\n          overflowX: \"scroll\",\r\n          position: \"absolute\",\r\n        }}\r\n      >\r\n        <DataGrid\r\n          slots={{ loadingOverlay: LinearProgress }}\r\n          loading={isLoading}\r\n          rows={[{ id: \"Loading...\" }]}\r\n          columns={updateColumns}\r\n        />\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: height,\r\n        width: \"100%\",\r\n        overflowX: \"scroll\",\r\n        position: \"absolute\",\r\n      }}\r\n    >\r\n      <button\r\n        id=\"reset-data-grid-selection\"\r\n        style={{ display: \"none\" }}\r\n        onClick={() => {\r\n          setRowSelectionModel([]);\r\n        }}\r\n      >\r\n        reset\r\n      </button>\r\n      {mutipleSelect ? (\r\n        <DataGrid\r\n          checkboxSelection\r\n          disableRowSelectionOnClick\r\n          slots={{ loadingOverlay: LinearProgress }}\r\n          loading={isLoading}\r\n          rowHeight={rowHeight}\r\n          rows={rows}\r\n          columns={columns}\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: { page: 0, pageSize: initialPage },\r\n            },\r\n          }}\r\n          pageSizeOptions={[initialPage, 25, 50, 100]}\r\n          getRowId={getRowId}\r\n        />\r\n      ) : (\r\n        <DataGrid\r\n          slots={{ loadingOverlay: LinearProgress }}\r\n          loading={isLoading}\r\n          rowHeight={rowHeight}\r\n          rows={rows}\r\n          columns={columns}\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: { page: 0, pageSize: initialPage },\r\n            },\r\n          }}\r\n          checkboxSelection\r\n          pageSizeOptions={[initialPage, 25, 50, 100]}\r\n          onRowDoubleClick={(params) => {\r\n            setDoubleClick((d) => !d);\r\n            setRowSelectionModel((data) => {\r\n              if (data.length > 0 && data[0] === params.id) {\r\n                return [];\r\n              }\r\n              return [params.id];\r\n            });\r\n          }}\r\n          onRowSelectionModelChange={(selection) => {\r\n            if (selection.length > 1) {\r\n              const selectionSet = new Set(rowSelectionModel);\r\n              const result = selection.filter((s) => !selectionSet.has(s));\r\n              onSelectionChange(result, rows);\r\n              setRowSelectionModel(result);\r\n            } else {\r\n              onSelectionChange(selection, rows);\r\n              setRowSelectionModel(selection);\r\n            }\r\n          }}\r\n          disableRowSelectionOnClick\r\n          rowSelectionModel={rowSelectionModel}\r\n          sx={{\r\n            \"& .MuiDataGrid-columnHeaderCheckbox .MuiDataGrid-columnHeaderTitleContainer\":\r\n              {\r\n                display: \"none\",\r\n              },\r\n            \"& .MuiDataGrid-row\": {\r\n              cursor: \"pointer\",\r\n            },\r\n          }}\r\n          getRowId={getRowId}\r\n          paginationModel={paginationModel}\r\n          onPaginationModelChange={(model) => {\r\n            setPaginationModel(model);\r\n            setSearchParams((prev) => {\r\n              prev.set(\"page\", model.page.toString());\r\n              prev.set(\"pageSize\", model.pageSize.toString());\r\n              return prev;\r\n            });\r\n          }}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Menu, MenuItem } from \"@mui/material\";\r\nimport { green } from \"@mui/material/colors\";\r\n\r\nexport function Dropdown({\r\n  setExportMode,\r\n}: {\r\n  setExportMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n}) {\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setExportMode(true);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        id=\"basic-button\"\r\n        aria-controls={open ? \"basic-menu\" : undefined}\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        onClick={handleClick}\r\n        variant=\"contained\"\r\n        sx={{\r\n          backgroundColor: green[500],\r\n          \"&:hover\": {\r\n            backgroundColor: green[600],\r\n          },\r\n        }}\r\n      >\r\n        Export\r\n      </Button>\r\n      <Menu\r\n        id=\"basic-menu\"\r\n        anchorEl={anchorEl}\r\n        open={open}\r\n        onClose={handleClose}\r\n        MenuListProps={{\r\n          \"aria-labelledby\": \"basic-button\",\r\n        }}\r\n      >\r\n        <MenuItem onClick={handleClose}>Export as Excel All Data </MenuItem>\r\n        <MenuItem onClick={handleClose}>\r\n          Export as Excel Only Data in Table{\" \"}\r\n        </MenuItem>\r\n        <MenuItem onClick={handleClose}>Print Data in Table</MenuItem>\r\n      </Menu>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {\r\n  useContext,\r\n  useState,\r\n  useRef,\r\n  FormEvent,\r\n  useReducer,\r\n  useEffect,\r\n} from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport useUrlParams from \"../../../hooks/useUrlParams\";\r\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\r\nimport DataGridTable from \"../../../components/DataGridTable\";\r\nimport { pink } from \"@mui/material/colors\";\r\nimport { AuthContext } from \"../../../components/AuthContext\";\r\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\r\nimport Swal from \"sweetalert2\";\r\nimport { wait } from \"../../../lib/wait\";\r\nimport { throttle } from \"lodash\";\r\nimport { green } from \"@mui/material/colors\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport { Dropdown } from \"../../../components/DropdownButton\";\r\n\r\nconst initialState = {\r\n  Description: \"\",\r\n  ShortName: \"\",\r\n  Acronym: \"\",\r\n};\r\nexport const reducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_FIELD\":\r\n      return {\r\n        ...state,\r\n        [action.field]: action.value,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function getAcronym(inputText: string) {\r\n  if (inputText === \"\" || inputText == null) return;\r\n\r\n  const exclusionList = [\"and\", \"the\", \"in\", \"of\", \"for\", \"with\"];\r\n  inputText = inputText.trim();\r\n\r\n  if (/^[A-Z]+$/.test(inputText)) {\r\n    return inputText;\r\n  }\r\n\r\n  inputText = inputText.toLowerCase();\r\n  const words = inputText.split(\" \");\r\n  let acronym = \"\";\r\n  for (const word of words) {\r\n    if (!exclusionList.includes(word)) {\r\n      acronym += word[0];\r\n    }\r\n  }\r\n  return acronym.toUpperCase();\r\n}\r\n\r\nexport const poliyAccountColumn = [\r\n  { field: \"Acronym\", headerName: \"Acronym\", width: 130 },\r\n  { field: \"ShortName\", headerName: \"ShortName\", width: 200 },\r\n  { field: \"Description\", headerName: \"Description\", flex: 1 },\r\n  { field: \"createdAt\", headerName: \"Created At\", flex: 1 },\r\n];\r\nconst queryKey = \"sub-account\";\r\nexport default function SubAccount() {\r\n  const { searchParams, setSearchParams } = useUrlParams();\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const { myAxios, user } = useContext(AuthContext);\r\n  const [exportMode, setExportMode] = useState(false);\r\n  const [loadingSearch, setLoadingSearch] = useState(false);\r\n  const [save, setSave] = useState(searchParams.get(\"selected\") !== \"\");\r\n  const [addNew, setAddNew] = useState(searchParams.get(\"selected\") !== \"\");\r\n  const [deleting, setDeleting] = useState(searchParams.get(\"selected\") !== \"\");\r\n  const [rows, setRows] = useState<GridRowSelectionModel>([]);\r\n  const submitButton = useRef<HTMLButtonElement>(null);\r\n\r\n  const [hasSelected, setHasSelected] = useState(\r\n    searchParams.get(\"selected\") !== \"\"\r\n  );\r\n  const queryClient = useQueryClient();\r\n\r\n  const { isLoading } = useQuery({\r\n    queryKey,\r\n    queryFn: async () =>\r\n      await myAxios.get(\r\n        `/reference/get-sub-account?subaccountSearch=${\r\n          searchParams.get(\"subaccountSearch\") as string\r\n        }`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${user?.accessToken}`,\r\n          },\r\n        }\r\n      ),\r\n    onSuccess: (res) => {\r\n      console.log(res);\r\n      setRows((res as any)?.data.subaccount);\r\n    },\r\n  });\r\n  const {\r\n    mutate,\r\n    isLoading: loadingAddNew,\r\n    variables,\r\n  } = useMutation({\r\n    mutationKey: queryKey,\r\n    mutationFn: async (variables: any) => {\r\n      if (variables.mode && variables.mode === \"delete\") {\r\n        return await myAxios.post(\"/reference/delete-sub-account\", variables, {\r\n          headers: {\r\n            Authorization: `Bearer ${user?.accessToken}`,\r\n          },\r\n        });\r\n      }\r\n      if (hasSelected) {\r\n        delete variables.mode;\r\n        return await myAxios.post(\"/reference/update-sub-account\", variables, {\r\n          headers: {\r\n            Authorization: `Bearer ${user?.accessToken}`,\r\n          },\r\n        });\r\n      }\r\n      delete variables.Sub_Acct;\r\n      delete variables.mode;\r\n      return await myAxios.post(\"/reference/add-sub-account\", variables, {\r\n        headers: {\r\n          Authorization: `Bearer ${user?.accessToken}`,\r\n        },\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      if (res.data.success) {\r\n        queryClient.invalidateQueries(queryKey);\r\n        return Swal.fire({\r\n          position: \"center\",\r\n          icon: \"success\",\r\n          title: res.data.message,\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n      }\r\n\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"error\",\r\n        title: res.data.message,\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (searchParams.get(\"selected\") === \"\") {\r\n      return;\r\n    }\r\n\r\n    const selectedParams = searchParams.get(\"selected\") as string;\r\n    const selectedIDs = new Set([selectedParams]);\r\n    const selectedRowData = rows?.filter((row: any) =>\r\n      selectedIDs.has(row.Sub_Acct.toString())\r\n    )[0];\r\n    if (selectedRowData) {\r\n      setNewStateValue(dispatch, selectedRowData);\r\n    }\r\n  }, [rows, searchParams]);\r\n\r\n  function handleSearchChange(event: any) {\r\n    setLoadingSearch(true);\r\n    const newInputValue = event.target.value;\r\n    setSearchParams((prev) => {\r\n      prev.set(\"subaccountSearch\", newInputValue);\r\n      return prev;\r\n    });\r\n    myAxios\r\n      .get(`/reference/search-sub-account?subaccountSearch=${newInputValue}`, {\r\n        headers: { Authorization: `Bearer ${user?.accessToken}` },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.data.success) {\r\n          setLoadingSearch(false);\r\n          setRows(res.data.subaccount);\r\n        }\r\n      });\r\n  }\r\n\r\n  const handleInputChange = (e: any) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"ShortName\") {\r\n      dispatch({\r\n        type: \"UPDATE_FIELD\",\r\n        field: \"Acronym\",\r\n        value: getAcronym(value ?? \"\") ?? \"\",\r\n      });\r\n    }\r\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\r\n  };\r\n\r\n  function handleOnSave() {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, save it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        wait(300).then(() => {\r\n          submitButton.current?.click();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  async function handleSubmit(e: FormEvent) {\r\n    e.preventDefault();\r\n    mutate({ ...state, mode: \"\", Sub_Acct: searchParams.get(\"selected\") });\r\n  }\r\n\r\n  const handleInputChangeThrottled = throttle(handleSearchChange, 300);\r\n  return (\r\n    <React.Fragment>\r\n      <Box>\r\n        <Typography variant=\"h5\" sx={{ marginBottom: \"10px\" }}>\r\n          Sub Account Details\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        sx={(theme) => ({\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          columnGap: \"20px\",\r\n          [theme.breakpoints.down(\"sm\")]: {\r\n            flexDirection: \"column\",\r\n            alignItems: \"flex-start\",\r\n            flex: 1,\r\n            marginBottom: \"15px\",\r\n          },\r\n        })}\r\n      >\r\n        <div\r\n          style={{\r\n            marginTop: \"10px\",\r\n            marginBottom: \"12px\",\r\n            flex: 1,\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Search\"\r\n            fullWidth\r\n            size=\"small\"\r\n            type=\"text\"\r\n            value={searchParams.get(\"subaccountSearch\")}\r\n            onChange={handleInputChangeThrottled}\r\n          />\r\n        </div>\r\n        {exportMode ? (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              columnGap: \"5px\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"success\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                import(\"../../../lib/export\").then((m) => {\r\n                  m.exportFunction(\r\n                    `/reference/export-sub-account?policySearch=${searchParams.get(\r\n                      \"subaccountSearch\"\r\n                    )}&isAll=true`,\r\n                    `Policy-All.xlsx`,\r\n                    myAxios,\r\n                    user\r\n                  );\r\n                });\r\n              }}\r\n            >\r\n              Export All\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"success\"\r\n              onClick={() => {\r\n                import(\"../../../lib/export\").then((m) => {\r\n                  m.exportFunction(\r\n                    `/reference/export-sub-account?policySearch=${searchParams.get(\r\n                      \"subaccountSearch\"\r\n                    )}&isAll=false`,\r\n                    `Policy-Search.xlsx`,\r\n                    myAxios,\r\n                    user\r\n                  );\r\n                });\r\n              }}\r\n              size=\"small\"\r\n            >\r\n              Export Table\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"error\"\r\n              size=\"small\"\r\n              onClick={() => setExportMode(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              columnGap: \"20px\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                columnGap: \"5px\",\r\n              }}\r\n            >\r\n              <div>\r\n                <Dropdown setExportMode={setExportMode} />\r\n              </div>\r\n              {!save && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<AddIcon />}\r\n                  id=\"entry-header-save-button\"\r\n                  onClick={() => {\r\n                    setAddNew(true);\r\n                    setSave(true);\r\n                    setHasSelected(false);\r\n                    setSearchParams((prev) => {\r\n                      prev.set(\"policySearch\", \"\");\r\n                      prev.set(\"selected\", \"\");\r\n                      return prev;\r\n                    });\r\n                    document\r\n                      .getElementById(\"reset-data-grid-selection\")\r\n                      ?.click();\r\n                  }}\r\n                >\r\n                  New\r\n                </Button>\r\n              )}\r\n\r\n              <Box sx={{ position: \"relative\" }}>\r\n                <Button\r\n                  id=\"save-entry-header\"\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  type=\"submit\"\r\n                  onClick={handleOnSave}\r\n                  disabled={\r\n                    (loadingAddNew && variables.mode === undefined) || !save\r\n                  }\r\n                  startIcon={<SaveIcon />}\r\n                >\r\n                  Save\r\n                </Button>\r\n\r\n                {loadingAddNew && variables.mode === undefined && (\r\n                  <CircularProgress\r\n                    size={24}\r\n                    sx={{\r\n                      color: green[500],\r\n                      position: \"absolute\",\r\n                      top: \"50%\",\r\n                      left: \"50%\",\r\n                      marginTop: \"-12px\",\r\n                      marginLeft: \"-12px\",\r\n                    }}\r\n                  />\r\n                )}\r\n              </Box>\r\n              {save && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<CloseIcon />}\r\n                  color=\"error\"\r\n                  onClick={() => {\r\n                    Swal.fire({\r\n                      title: \"Are you sure?\",\r\n                      text: \"You won't be able to revert this!\",\r\n                      icon: \"warning\",\r\n                      showCancelButton: true,\r\n                      confirmButtonColor: \"#3085d6\",\r\n                      cancelButtonColor: \"#d33\",\r\n                      confirmButtonText: \"Yes, cancel it!\",\r\n                    }).then((result) => {\r\n                      if (result.isConfirmed) {\r\n                        setSave(false);\r\n                        setAddNew(false);\r\n                        setDeleting(false);\r\n                        setNewStateValue(dispatch, initialState);\r\n                        document\r\n                          .getElementById(\"reset-data-grid-selection\")\r\n                          ?.click();\r\n                        setHasSelected(false);\r\n                        setSearchParams((prev) => {\r\n                          prev.set(\"policySearch\", \"\");\r\n                          prev.set(\"selected\", \"\");\r\n                          return prev;\r\n                        });\r\n                      }\r\n                    });\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              )}\r\n\r\n              <Button\r\n                id=\"save-entry-header\"\r\n                variant=\"contained\"\r\n                sx={{\r\n                  backgroundColor: pink[500],\r\n                  \"&:hover\": {\r\n                    backgroundColor: pink[600],\r\n                  },\r\n                }}\r\n                disabled={!deleting}\r\n                startIcon={<DeleteIcon />}\r\n                onClick={() => {\r\n                  Swal.fire({\r\n                    title: \"Are you sure?\",\r\n                    text: \"You won't be able to revert this!\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: \"#3085d6\",\r\n                    cancelButtonColor: \"#d33\",\r\n                    confirmButtonText: \"Yes, delete it!\",\r\n                  }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                      mutate({\r\n                        Sub_Acct: searchParams.get(\"selected\") as string,\r\n                        mode: \"delete\",\r\n                      });\r\n                    } else {\r\n                    }\r\n                  });\r\n                }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Box>\r\n      {!exportMode && (\r\n        <form onSubmit={handleSubmit}>\r\n          <Box\r\n            sx={(theme) => ({\r\n              display: \"flex\",\r\n              columnGap: \"15px\",\r\n              flexDirection: \"row\",\r\n              [theme.breakpoints.down(\"md\")]: {\r\n                flexDirection: \"column\",\r\n                rowGap: \"10px\",\r\n              },\r\n            })}\r\n          >\r\n            <TextField\r\n              sx={{ minWidth: \"150px\" }}\r\n              size=\"small\"\r\n              label=\"Acronym\"\r\n              name=\"Acronym\"\r\n              required\r\n              value={state.Acronym}\r\n              onChange={handleInputChange}\r\n              InputProps={{ readOnly: true }}\r\n              disabled={!addNew}\r\n            />\r\n            <TextField\r\n              sx={{ minWidth: \"250px\" }}\r\n              size=\"small\"\r\n              label=\"ShortName\"\r\n              name=\"ShortName\"\r\n              required\r\n              value={state.ShortName}\r\n              onChange={handleInputChange}\r\n              disabled={!addNew}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Description\"\r\n              name=\"Description\"\r\n              required\r\n              value={state.Description}\r\n              onChange={handleInputChange}\r\n              disabled={!addNew}\r\n            />\r\n          </Box>\r\n          <button\r\n            ref={submitButton}\r\n            style={{ display: \"none\" }}\r\n            type=\"submit\"\r\n          ></button>\r\n        </form>\r\n      )}\r\n      <div style={{ marginTop: \"10px\", width: \"100%\", position: \"relative\" }}>\r\n        <DataGridTable\r\n          mutipleSelect={exportMode}\r\n          isLoading={loadingAddNew || isLoading || loadingSearch}\r\n          dataKey={\"entry\"}\r\n          queryKey={[queryKey]}\r\n          columns={poliyAccountColumn}\r\n          onSelectionChange={(rowSelectionModel, data) => {\r\n            if (rowSelectionModel.length <= 0) {\r\n              setNewStateValue(dispatch, initialState);\r\n              setSearchParams((prev) => {\r\n                prev.set(\"selected\", \"\");\r\n                return prev;\r\n              });\r\n              setHasSelected(false);\r\n              setAddNew(false);\r\n              setSave(false);\r\n              setDeleting(false);\r\n              return;\r\n            }\r\n            setSave(true);\r\n\r\n            setDeleting(true);\r\n            setAddNew(true);\r\n            setHasSelected(true);\r\n            const selectedIDs = new Set(rowSelectionModel);\r\n            const selectedRowData = data.filter((row: any) =>\r\n              selectedIDs.has(row.Sub_Acct.toString())\r\n            );\r\n\r\n            setSearchParams((prev) => {\r\n              prev.set(\"selected\", rowSelectionModel[0] as string);\r\n              return prev;\r\n            });\r\n\r\n            setNewStateValue(dispatch, selectedRowData[0]);\r\n          }}\r\n          getRowId={(row) => row.Sub_Acct}\r\n          rows={rows}\r\n          setRows={setRows}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport function setNewStateValue(dispatch: any, obj: any) {\r\n  Object.entries(obj).forEach(([field, value]) => {\r\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\r\n  });\r\n}\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;","const pink = {\n  50: '#fce4ec',\n  100: '#f8bbd0',\n  200: '#f48fb1',\n  300: '#f06292',\n  400: '#ec407a',\n  500: '#e91e63',\n  600: '#d81b60',\n  700: '#c2185b',\n  800: '#ad1457',\n  900: '#880e4f',\n  A100: '#ff80ab',\n  A200: '#ff4081',\n  A400: '#f50057',\n  A700: '#c51162'\n};\nexport default pink;"],"names":["DataGridTable","_ref","onSelectionChange","_ref$initialPage","initialPage","columns","_ref$rowHeight","rowHeight","getRowId","rows","isLoading","mutipleSelect","_ref$height","height","_useUrlParams","useUrlParams","searchParams","setSearchParams","_useState","useState","_useState2","_slicedToArray","rowSelectionModel","setRowSelectionModel","_useState3","_useState4","doubleClick","setDoubleClick","_React$useState","React","pageSize","parseInt","get","page","_React$useState2","paginationModel","setPaginationModel","useEffect","updateColumns","map","column","field","_objectSpread","colSpan","align","_jsx","Box","sx","width","overflowX","position","children","DataGrid","slots","loadingOverlay","LinearProgress","loading","id","_jsxs","style","display","onClick","checkboxSelection","disableRowSelectionOnClick","initialState","pagination","pageSizeOptions","onRowDoubleClick","params","d","data","length","onRowSelectionModelChange","selection","selectionSet","Set","result","filter","s","has","cursor","onPaginationModelChange","model","prev","set","toString","Dropdown","setExportMode","anchorEl","setAnchorEl","open","Boolean","handleClose","Button","undefined","event","currentTarget","variant","backgroundColor","green","Menu","onClose","MenuListProps","MenuItem","Description","ShortName","Acronym","reducer","state","action","type","_defineProperty","value","getAcronym","inputText","exclusionList","trim","test","_step","words","toLowerCase","split","acronym","_iterator","_createForOfIteratorHelper","n","done","word","includes","err","e","f","toUpperCase","poliyAccountColumn","headerName","flex","queryKey","SubAccount","_queryFn","_mutationFn","_handleSubmit","_useReducer","useReducer","_useReducer2","dispatch","_useContext","useContext","AuthContext","myAxios","user","exportMode","loadingSearch","setLoadingSearch","_useState5","_useState6","save","setSave","_useState7","_useState8","addNew","setAddNew","_useState9","_useState10","deleting","setDeleting","_useState11","_useState12","setRows","submitButton","useRef","_useState13","_useState14","hasSelected","setHasSelected","queryClient","useQueryClient","_useQuery","useQuery","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","concat","headers","Authorization","accessToken","abrupt","sent","stop","apply","arguments","onSuccess","res","console","log","subaccount","_useMutation","useMutation","mutationKey","mutationFn","_x","_callee2","variables","_context2","mode","post","Sub_Acct","success","invalidateQueries","Swal","icon","title","message","showConfirmButton","timer","mutate","loadingAddNew","selectedParams","selectedIDs","selectedRowData","row","setNewStateValue","handleInputChange","_getAcronym","_e$target","target","name","handleInputChangeThrottled","throttle","newInputValue","then","Typography","marginBottom","theme","alignItems","columnGap","breakpoints","down","flexDirection","marginTop","TextField","label","fullWidth","size","onChange","color","m","exportFunction","startIcon","AddIcon","_document$getElementB","document","getElementById","click","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","wait","_submitButton$current","current","disabled","SaveIcon","CircularProgress","top","left","marginLeft","CloseIcon","_document$getElementB2","pink","DeleteIcon","onSubmit","_x2","_callee3","_context3","preventDefault","rowGap","minWidth","required","InputProps","readOnly","ref","dataKey","obj","Object","entries","forEach","_ref3","_ref4","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","A100","A200","A400","A700"],"sourceRoot":""}